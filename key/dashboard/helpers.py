# AUTOGENERATED! DO NOT EDIT! File to edit: ../../_nbdev.ipynb.

# %% auto 0
__all__ = ['pprint_traits', 'answer']

# %% ../../_nbdev.ipynb 13
import pprint

def pprint_traits(has_traits):
    trait_names = object_has_traits.trait_names()
    trait_names = [name for name in trait_names if not name.startswith('_')]
    exclude = ['comm', 'log', 'keys']
    trait_names = [name for name in trait_names if name not in exclude]
    traits = {key: getattr(object_has_traits, key) for key in trait_names if object_has_traits.trait_has_value(key)}
    pprint.pprint(traits)

# %% ../../_nbdev.ipynb 28
from IPython.core.magic import register_line_magic
import re

@register_line_magic
def answer(inputs):
    words = []
    for word in inputs.split(' '):
        if not word.startswith('#'):
            words.append(word)
        else:
            break
    
    assert len(words) == 2,  "%answer takes a filepath and a cell number"
    filepath = words[0]
    cell_number = int(words[1])
    
    with open(filepath, 'r') as file:
        lines = file.readlines()

    pattern = r'# %% .+ \d+'
    start_line = None
    end_line = None

    for i, line in enumerate(lines):
        if re.match(pattern, line):
            match = re.search(r'\d+', line)
            if match and int(match.group()) == cell_number:
                start_line = i + 1
                break
    if start_line is not None:
        for i in range(start_line, len(lines)):
            if re.match(pattern, lines[i]):
                end_line = i
                break
        else:
            end_line = len(lines)
            
    if start_line is not None and end_line is not None:
        code_chunk = ''.join(lines[start_line:end_line])
        get_ipython().set_next_input(code_chunk, replace=True)
    else:
        print(f"Cell number {cell_number} not found in the Python file.")

