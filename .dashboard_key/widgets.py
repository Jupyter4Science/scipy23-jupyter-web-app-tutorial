# AUTOGENERATED! DO NOT EDIT! File to edit: ../03_dashboarding.ipynb.

# %% auto 0
__all__ = ['DATA_DIR', 'DATA_FILE', 'original_data', 'year_range', 'selected', 'selected_data_output', 'window_size',
           'poly_order', 'plot_output', 'on_range_change', 'display_selected_data', 'on_window_size_change',
           'on_poly_order_change', 'display_plot']

# %% ../03_dashboarding.ipynb 3
import pandas as pd
import os
import ipywidgets as widgets # add import statement
from matplotlib import pyplot as plt
from scipy.signal import savgol_filter

# %% ../03_dashboarding.ipynb 7
# Load data into memory from file
DATA_DIR = 'data'
DATA_FILE = 'land-ocean-temp-index.csv'

original_data = pd.read_csv(os.path.join(DATA_DIR, DATA_FILE), escapechar='#')
original_data

# %% ../03_dashboarding.ipynb 9
year_range = widgets.IntRangeSlider(description = 'Range of Years')
year_range

# %% ../03_dashboarding.ipynb 14
year_range.max =  max(original_data['Year'])  # set the 'max' attribute of the slider to the minimum year of the our data  
year_range.min = min(original_data['Year'])  # and let's do the same for 'min'

# %% ../03_dashboarding.ipynb 20
selected = original_data[(original_data['Year'] >= year_range.value[0]) & (original_data['Year'] <= year_range.value[1])] # selected = original_data[(original_data['Year'] >= from_year) & (original_data['Year'] <= to_year)]

# %% ../03_dashboarding.ipynb 29
def on_range_change(change):
    global selected
    selected = original_data[(original_data['Year'] >= change['new'][0]) & (original_data['Year'] <= change['new'][1])]

# %% ../03_dashboarding.ipynb 39
year_range.observe(on_range_change, 'value') # year_range.observe(on_range_change)

# %% ../03_dashboarding.ipynb 43
selected_data_output = widgets.Output()
selected_data_output

# %% ../03_dashboarding.ipynb 47
def display_selected_data(change): 
    selected_data_output.clear_output(wait=True)
    with selected_data_output: 
        display(selected)

# %% ../03_dashboarding.ipynb 48
display_selected_data(None)

# %% ../03_dashboarding.ipynb 51
year_range.observe(display_selected_data, 'value')

# %% ../03_dashboarding.ipynb 59
window_size = widgets.IntSlider(description = 'Window Size', min=1, max=100)

# %% ../03_dashboarding.ipynb 61
poly_order = widgets.BoundedIntText(description = 'Poly Order', min=0, max=10)

# %% ../03_dashboarding.ipynb 64
def on_window_size_change(change):
    global original_data, selected
    original_data['Savitzky-Golay'] = savgol_filter(original_data['Temperature'], change['new'], poly_order.value) # original_data['Savitzky-Golay'] = savgol_filter(original_data['Temperature'], window_size, poly_order)
    selected = original_data[(original_data['Year'] >= year_range.value[0]) & (original_data['Year'] <= year_range.value[1])]

# %% ../03_dashboarding.ipynb 66
window_size.observe(on_window_size_change, 'value')
window_size.observe(display_selected_data, 'value')

# %% ../03_dashboarding.ipynb 69
def on_poly_order_change(change):
    global original_data, selected
    original_data['Savitzky-Golay'] = savgol_filter(original_data['Temperature'], window_size.value, change['new']) # original_data['Savitzky-Golay'] = savgol_filter(original_data['Temperature'], window_size, poly_order)
    selected = original_data[(original_data['Year'] >= year_range.value[0]) & (original_data['Year'] <= year_range.value[1])]

# %% ../03_dashboarding.ipynb 70
poly_order.observe(on_poly_order_change, 'value')
poly_order.observe(display_selected_data, 'value')

# %% ../03_dashboarding.ipynb 75
def on_window_size_change(change):
    global original_data, selected, poly_order
    # change the maximum of the poly_order widget
    original_data['Savitzky-Golay'] = savgol_filter(original_data['Temperature'], change['new'], poly_order.value)
    selected = original_data[(original_data['Year'] >= year_range.value[0]) & (original_data['Year'] <= year_range.value[1])]


# %% ../03_dashboarding.ipynb 77
window_size.observe(on_window_size_change, 'value')
window_size.observe(display_selected_data, 'value')

# %% ../03_dashboarding.ipynb 80
window_size.value = 10
poly_order.value = 1

# %% ../03_dashboarding.ipynb 85
plot_output = widgets.Output() # create an output widget called selected_data_output
plot_output

# %% ../03_dashboarding.ipynb 88
def display_plot(change):  # def display_selected_data(change): 
    plot_output.clear_output(wait=True) #selected_data_output.clear_output(wait=True)
    with plot_output:  # with selected_data_output: 
        plt.xlabel('Year') # display(selected)
        plt.ylabel('Temperature') 
        plt.plot(selected['Year'], selected['Temperature'])  # plt.plot(selected_range['Year'], selected_range['Temperature'])
        plt.plot(selected['Year'], selected['Savitzky-Golay']) 
        plt.show() 

# %% ../03_dashboarding.ipynb 92
year_range.observe(display_plot, 'value')
window_size.observe(display_plot, 'value')
poly_order.observe(display_plot, 'value')

# %% ../03_dashboarding.ipynb 93
year_range.value = (1900, 2000)
